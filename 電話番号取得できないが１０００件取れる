New! Keyboard shortcuts … Drive keyboard shortcuts have been updated to give you first-letters navigation
from flask import Flask, render_template, request, jsonify
import requests
import time

app = Flask(__name__)

API_KEY = '634c407235d16f2b'  # ここにHotPepper APIキーを入力
URL = 'http://webservice.recruit.co.jp/hotpepper/gourmet/v1/'

def get_data(keywords, count=1000):
    keyword_str = ' '.join(keywords)
    results = []
    start = 1
    print(f"デバッグ: データ取得を開始します。最大{count}件を取得します。")
    print(f"デバッグ: 検索キーワード: {keyword_str}")

    while len(results) < count and start <= 1000:
        print(f"デバッグ: APIリクエストを送信中 (start={start}, 現在の取得件数={len(results)})")
        params = {
            'key': API_KEY,
            'keyword': keyword_str,
            'format': 'json',
            'count': 100,
            'start': start
        }

        response = requests.get(URL, params=params)
        print(f"デバッグ: APIからの応答コード: {response.status_code}")
        datum = response.json()

        if response.status_code != 200 or 'results' not in datum or 'shop' not in datum['results']:
            print("デバッグ: データの取得に失敗しました。APIからの応答が不正です。")
            break
        
        stores = datum['results']['shop']
        print(f"デバッグ: {len(stores)}件の店舗データを取得しました。結果に追加します。")

        results.extend([{
            '店舗名': store.get('name', 'N/A'),
            '電話番号のURL': store.get('urls', {}).get('pc', 'N/A'),
            'サービスエリア名': store.get('service_area', {}).get('name', 'N/A'),
            '住所': store.get('address', 'N/A'),
            '口コミ': store.get('catch', 'N/A'),
            '営業時間': store.get('open', 'N/A'),
            '定休日': store.get('close', 'N/A'),
            'ディナー予算': store.get('budget', {}).get('average', 'N/A'),
            'お店キャッチ': store.get('catch', 'N/A'),
            '総席数': store.get('capacity', 'N/A'),
            'ジャンル名': store.get('genre', {}).get('name', 'N/A'),
            'サブジャンル名': store.get('sub_genre', {}).get('name', 'N/A'),
            'PC向けURL': store.get('urls', {}).get('pc', 'N/A'),
            '口コミ数': 'N/A'
        } for store in stores])

        print(f"デバッグ: 現在{len(results)}件のデータが取得されました。")

        start += 100

        if len(results) >= datum['results']['results_available']:
            print("デバッグ: 全ての利用可能なデータを取得しました。ループを終了します。")
            break

        time.sleep(1)
        print("デバッグ: 次のリクエストまで1秒待機します。")

    print("デバッグ: データ取得が完了しました！最終的に取得された件数:", len(results))
    return results[:count]

@app.route('/', methods=['GET', 'POST'])
def index():
    print("デバッグ: indexページにアクセスしました。GET/POSTリクエストを受け取っています。")
    return render_template('index.html')

@app.route('/fetch_data', methods=['POST'])
def fetch_data():
    print("デバッグ: fetch_dataエンドポイントが呼び出されました。POSTリクエストを処理中です。")
    keywords = request.json.get('keywords', '').split()
    count = request.json.get('count', 1000)
    print(f"デバッグ: POSTされたデータ - keywords: {keywords}, count: {count}")
    results = get_data(keywords, int(count))
    print(f"デバッグ: データ取得が完了しました。{len(results)}件の結果をクライアントに返します。")
    return jsonify(results)

if __name__ == '__main__':
    print("デバッグ: Flaskアプリケーションを起動します。")
    app.run(debug=True)

ーーーーーーーーーーーーーーーーーーーーー
New! Keyboard shortcuts … Drive keyboard shortcuts have been updated to give you first-letters navigation
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>HotPepper グルメ検索 Powered by ホットペッパーグルメ Webサービス</title>
    <style>
        body {
            background-color: #ffffff;
            color: #333333;
            font-family: Arial, sans-serif;
        }

        header {
            background-color: #e60033;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
            color: #ffffff;
        }

        form {
            background-color: #fff5f5;
            padding: 20px;
            border: 1px solid #e60033;
            border-radius: 5px;
            margin-bottom: 20px;
            max-width: 600px;
            margin: auto;
        }

        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
        }

        input[type="text"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #e60033;
            border-radius: 5px;
        }

        button {
            background-color: #ff6600;
            color: #ffffff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #cc5200;
        }

        .status-message {
            margin-top: 20px;
            text-align: center;
            font-weight: bold;
            font-size: 18px;
            color: #333;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #ffffff;
        }

        th, td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }

        th {
            background-color: #e60033;
            color: #ffffff;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #ffebcd;
        }
    </style>
    <script>
        function fetchData(event) {
            event.preventDefault();
            const keywords = document.getElementById('keywords').value;
            const count = document.getElementById('count').value;
            const messageBox = document.getElementById('status-message');
            const resultsTable = document.getElementById('results-table');
            
            // メッセージ表示
            messageBox.textContent = "データ抽出中です！";
            resultsTable.innerHTML = "";

            fetch('/fetch_data', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ keywords: keywords, count: count })
            })
            .then(response => response.json())
            .then(data => {
                // メッセージ更新
                messageBox.textContent = `${data.length}件のデータを取得しました！`;

                let rows = data.map(result => `
                    <tr>
                        <td>${result.店舗名}</td>
                        <td>${result.電話番号}</td>
                        <td>${result.住所}</td>
                        <td>${result.口コミ}</td>
                        <td>${result.営業時間}</td>
                        <td>${result.定休日}</td>
                        <td>${result.ディナー予算}</td>
                        <td>${result.お店キャッチ}</td>
                        <td>${result.総席数}</td>
                        <td>${result.ジャンル名}</td>
                        <td>${result.サブジャンル名}</td>
                        <td>${result.口コミ数}</td>
                        <td>${result.サービスエリア名}</td>
                        <td><a href="${result.PC向けURL}" target="_blank">${result.PC向けURL}</a></td>
                    </tr>
                `).join('');
                resultsTable.innerHTML = rows;
            });
        }
    </script>
</head>
<body>
    <header>
        <h1>HotPepper グルメ検索</h1>
        <p>Powered by ホットペッパーグルメ Webサービス</p>
    </header>

    <form onsubmit="fetchData(event)">
        <label for="keywords">検索キーワード (スペースで区切って入力):</label>
        <input type="text" id="keywords" name="keywords" required>
        <br><br>
        <label for="count">取得件数 (空白の場合はすべて抽出を試みます):</label>
        <input type="text" id="count" name="count">
        <br><br>
        <button type="submit">検索</button>
    </form>

    <div id="status-message" class="status-message"></div>

    <table border="1" id="results-table">
        <tr>
            <th>店舗名</th>
            <th>電話番号</th>
            <th>住所</th>
            <th>口コミ</th>
            <th>営業時間</th>
            <th>定休日</th>
            <th>ディナー予算</th>
            <th>お店キャッチ</th>
            <th>総席数</th>
            <th>ジャンル名</th>
            <th>サブジャンル名</th>
            <th>口コミ数</th>
            <th>サービスエリア名</th>
            <th>PC向けURL</th>
        </tr>
    </table>
</body>
</html>
