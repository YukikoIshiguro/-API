from flask import Flask, render_template, request, redirect, url_for, send_file, flash
import requests
import pandas as pd
import os
from bs4 import BeautifulSoup
from io import BytesIO
import threading

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # セッションを使うために必要

API_KEY = '634c407235d16f2b'
URL = 'http://webservice.recruit.co.jp/hotpepper/gourmet/v1/'

results = []
is_processing = False
process_thread = None

def get_data(keywords, count=1000):
    global results, is_processing
    keyword_str = ' '.join(keywords)
    params = {
        'key': API_KEY,
        'keyword': keyword_str,
        'format': 'json',
        'count': count,
        'start': 1
    }

    results = []
    while True:
        if not is_processing:
            break

        try:
            response = requests.get(URL, params=params)
            response.raise_for_status()
            datum = response.json()

            if 'results' not in datum or 'shop' not in datum['results']:
                print("検索に失敗しました。")
                break

            stores = datum['results']['shop']
            results.extend([{
                '店舗名': store.get('name', 'N/A'),
                '電話番号のURL': store.get('urls', {}).get('pc', 'N/A').split('?')[0].rstrip('/') + "/tel" if store.get('urls', {}).get('pc', 'N/A') != 'N/A' else 'N/A',
                'サービスエリア名': store.get('service_area', {}).get('name', 'N/A'),
                '住所': store.get('address', 'N/A'),
                '口コミ': store.get('catch', 'N/A'),
                '営業時間': store.get('open', 'N/A'),
                '定休日': store.get('close', 'N/A'),
                'ディナー予算': store.get('budget', {}).get('average', 'N/A'),
                'お店キャッチ': store.get('catch', 'N/A'),
                '総席数': store.get('capacity', 'N/A'),
                'ジャンル名': store.get('genre', {}).get('name', 'N/A'),
                'サブジャンル名': store.get('sub_genre', {}).get('name', 'N/A'),
                'PC向けURL': store.get('urls', {}).get('pc', 'N/A'),
                '口コミ数': 'N/A'
            } for store in stores])

            if not count:
                if len(results) >= datum['results']['results_available']:
                    break
                params['start'] += 100
            else:
                break

        except Exception as e:
            print(f"データ取得中にエラーが発生しました: {e}")
            break

    print(f"最終的なデータ件数: {len(results)}件")

def get_review_count(url):
    review_count_text = "口コミ数なし"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            li_element = soup.select_one('li.recommendReport > a')
            if li_element:
                p_element = li_element.find_next('p', class_='recommendReportNum')
                if p_element:
                    review_count_text = p_element.find('span').get_text()
    except Exception as e:
        print(f"口コミ数取得中にエラーが発生しました: {e}")

    return review_count_text

def get_phone_number(url):
    phone_number_text = "電話番号なし"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            phone_number_tag = soup.select_one('div.storeTelephoneWrap > p.telephoneNumber')
            if phone_number_tag:
                phone_number_text = phone_number_tag.get_text().strip()
    except Exception as e:
        print(f"電話番号取得中にエラーが発生しました: {e}")

    return phone_number_text

def save_to_excel(results):
    try:
        if results:
            df = pd.DataFrame(results)
            df['電話番号'] = df['電話番号のURL'].apply(get_phone_number)
            df['口コミ数'] = df['PC向けURL'].apply(get_review_count)
            columns_order = ['店舗名', '電話番号', '住所', '口コミ', '営業時間', '定休日', 'ディナー予算',
                             'お店キャッチ', '総席数', 'ジャンル名', 'サブジャンル名', 'PC向けURL', '口コミ数',
                             'サービスエリア名']
            df = df[columns_order]

            output = BytesIO()
            df.to_excel(output, index=False, engine='openpyxl')
            output.seek(0)
            return output
        else:
            return None
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return None

def process_data(keywords, count=1000):
    global is_processing
    is_processing = True
    try:
        get_data(keywords, count)
    finally:
        is_processing = False

@app.route('/', methods=['GET', 'POST'])
def index():
    global process_thread
    if request.method == 'POST':
        if 'stop' in request.form:
            global is_processing
            is_processing = False
            if process_thread:
                process_thread.join()
            flash('データ抽出が中断されました。')
            return redirect(url_for('index'))

        if 'clear' in request.form:
            return redirect(url_for('index'))

        keywords = request.form['keywords'].split()
        count = request.form.get('count')
        count = int(count) if count else 1000  # デフォルトで1000件に設定

        flash('データ抽出が開始されました。進捗を確認してください。')
        process_thread = threading.Thread(target=process_data, args=(keywords, count))
        process_thread.start()
        return redirect(url_for('index'))

    return render_template('form.html', processing=is_processing)

@app.route('/download')
def download():
    excel_file = save_to_excel(results)
    if excel_file:
        flash('データ抽出が完了しました！')
        print(f"データ抽出が完了しました！最終的なデータ件数: {len(results)}件")
        return send_file(excel_file, as_attachment=True, download_name='store_data.xlsx', mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    else:
        flash('データの取得または保存に失敗しました。')
        return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)
